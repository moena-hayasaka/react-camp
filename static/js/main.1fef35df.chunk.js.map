{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","radio","yourName","live","job","hobby","message","successClass","event","inputLive","target","value","setState","inputName","inputJob","inputHobby","writeMsg","$","css","setTimeout","tmpMsg","console","log","_this2","react_default","a","createElement","className","type","name","id","checked","onChange","htmlFor","handleInputName","bind","handleInputLive","handleInputJob","handleInputhobby","onClick","send","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fef35df.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery'; // jqueryを使えるようにする\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      radio: '1', // ラジオボタン選択値\n      yourName: '', // 名前\n      live: '', // 居住地\n      job: '', // 職業\n      hobby: '', // 趣味\n      message: '', // 最終的に表示するメッセージ\n      successClass: '' // display:block\n    };\n  }\n\n  // value入力中\n  handleInputLive(event) {\n    const inputLive = event.target.value;\n    this.setState({\n      live: inputLive\n    });\n  }\n\n  handleInputName(event) {\n    const inputName = event.target.value;\n    this.setState({\n      yourName: inputName\n    });\n  }\n\n    handleInputJob(event) {\n      const inputJob = event.target.value;\n      this.setState({\n        job: inputJob\n      });\n    }\n\n    handleInputhobby(event) {\n      const inputHobby = event.target.value;\n      this.setState({\n        hobby: inputHobby\n      });\n    }\n\n  // SENDボタンクリック時\n  send() {\n    // const { live } = this.state; // stateからvalueを取得\n    this.writeMsg();\n    $('.outputArea__msg').css('opacity', 1);\n    setTimeout(() => {\n      $('.outputArea__sns').css('opacity', 1);\n    }, 400);\n  }\n\n  writeMsg() {\n    const { radio } = this.state; // stateからradioの値を取得\n    let { live } = this.state; // stateからvalueを取得\n    // let { yourName } = this.state;\n    let { job } = this.state;\n    let { hobby } = this.state;\n    const line = ' | ';\n    let tmpMsg = '';\n    if (radio === '1') {\n      tmpMsg = '@ ' + live + '\\r\\n' + job;\n      console.log(tmpMsg);\n\n    } else if (radio === '2') {\n      tmpMsg = live + line + job + line;\n    } else {\n      tmpMsg = live + 'で' + job + 'やってます。' + hobby + 'が趣味の方、気軽にフォローしてください！';\n    }\n\n    this.setState({\n      message: tmpMsg\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"top\">\n          <h1 className=\"top__title\">Profile Creator</h1>\n          <p className=\"top__desc\">Let's create your profile you can use your page in SNS!</p>\n        </div>\n\n        <div className=\"formArea\">\n          <div className=\"radioArea\">\n            <p className=\"radioArea__txt\">Select Type</p>\n            <div className=\"radioArea__button\">\n              <ul className=\"typeList\">\n                <li className=\"typeList__item\">\n                  <input type=\"radio\" name=\"textType\" id=\"type1\" value=\"1\" checked={this.state.radio === '1'} onChange={() => this.setState({ radio: '1' })} />\n                  <label htmlFor=\"type1\">SHAREOTSU</label>\n              </li>\n                <li className = \"typeList__item\" >\n                  <input type=\"radio\" name=\"textType\" id=\"type2\" value=\"2\" checked={this.state.radio === '2'} onChange={() => this.setState({ radio: '2' })} />\n                  <label htmlFor=\"type2\">SHIMPLE</label>\n              </li>\n                <li className = \"typeList__item\" >\n                  <input type=\"radio\" name=\"textType\" id=\"type3\" value=\"3\" checked={this.state.radio === '3'} onChange={() => this.setState({ radio: '3' })} />\n                  <label htmlFor=\"type3\">TALKING</label>\n              </li>\n              </ul>\n            </div>\n\n          </div>\n          <div className=\"inputArea\">\n            <p className=\"inputArea__txt\">Fill In Blanks</p>\n            <div className=\"inputArea__item\">\n              <label>名前</label>\n              <input type=\"text\" value={this.state.yourName} onChange={this.handleInputName.bind(this)} />\n            </div>\n            <div className=\"inputArea__item\">\n              <label>居住地</label>\n              <input type=\"text\" value={this.state.live} onChange={this.handleInputLive.bind(this)} />\n            </div>\n            <div className=\"inputArea__item\">\n              <label>職業</label>\n              <input type=\"text\" value={this.state.job} onChange={this.handleInputJob.bind(this)}/>\n            </div>\n            <div className=\"inputArea__item\">\n              <label>趣味</label>\n              <input type=\"text\" value={this.state.hobby} onChange={this.handleInputhobby.bind(this)}/>\n            </div>\n          </div>\n\n\n          {/* 職業, 出身、居住域、趣味、すきなもの（複数）、URL*/}\n          {/* 未記入の場合のバリデーション、分岐 */}\n          <button className=\"sendButton\" onClick={this.send.bind(this)}>CREATE!</button>\n        </div>\n\n\n        <div className=\"outputArea\">\n          < p className ='outputArea__msg' >Created!!!</p>\n          <div className=\"outputArea__sns\">\n            <div className=\"sns__header\">\n              <img src=\"./sns_header.png\" alt = \"\" />\n            </div>\n            <div className=\"sns__content\">\n              <div className=\"sns__content__photo\">\n                <img src=\"./girl.jpg\" alt=\"\"/>\n              </div>\n              <div className=\"sns__content__text\">\n                <div className=\"row1\">\n                  <p className=\"userId\">nijibox</p>\n                  <p className=\"lookPro\">プロフィールを編集</p>\n                  <span className=\"wheel\">\n                    <img src=\"./wheel.png\" alt=\"\"/>\n                  </span>\n                </div>\n                <div className=\"row2\">\n                  <p>投稿98件&nbsp;&nbsp;&nbsp;フォロワー201人&nbsp;&nbsp;&nbsp;228人をフォロー中 </p>\n                </div>\n                <div className=\"row3\">\n                  {this.state.yourName}\n                </div>\n                <pre className=\"row4\">\n                {this.state.message}\n                </pre>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}